include("Input.jl")
include("DispersionFreeSurface.jl")
include("DispersionElasticSurface.jl")

struct FiniteDepth
  N::Int64
end
FiniteDepth() = FiniteDepth(3)
struct FiniteDepthSolution
  a‚Çò::Vector{ComplexF64}
  c‚Çò‚Åª::Vector{ComplexF64}
  c‚Çò‚Å∫::Vector{ComplexF64}
  k‚Çò::Vector{ComplexF64}
  Œ∫‚Çò::Vector{ComplexF64}
  p::Vector{ComplexF64}
  b::Vector{ComplexF64}
  ndp::NonDimensionalProblem
  BeamType
end

function solve(Ice::Ice, Fluid::Fluid, œâ, fd::FiniteDepth)
  solve(Ice, Fluid, œâ, FreeClamped(), fd)
end

function solve(Ice::Ice, Fluid::Fluid, œâ, ptype::Union{FreeClamped, FreeHinged}, fd::FiniteDepth)
  N = fd.N
  ndp = non_dimensionalize(Ice, Fluid, œâ)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  g = ndp.geo[end]
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  X = ndp.X
  œâ = ‚àö(Œ±*g/ùëô)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  d = Œ≥*ùëô
  A‚Çö = g/(1im*œâ)

  k = dispersion_free_surface(Œ±, N, HH)
  Œ∫ = dispersion_elastic_surface(Œ±, 1., Œ≥, N+2, HH-Œ≥)

  function innerproduct(k, kappa, H, d)
    if(abs(k-kappa)>=1e-7)
      return ( (kappa*sin(kappa*(H-d))*cos(k*(H-d)) - k*cos(kappa*(H-d))*sin(k*(H-d)))/(kappa^2-k^2) );
    else
      return ( (H-d)/2 + sin(2*k*(H-d))/(4*k) );
    end
  end

  œá = (0:N)*(œÄ/(HH-Œ≥))
  Œª = k; Œª[1] = -k[1]

  D1 = zeros(ComplexF64, N+1, N+3)
  D2 = zeros(ComplexF64, N+1, N+1)
  D3 = zeros(ComplexF64, N+1, N+3)

  for m=1:N+1
    for n=1:N+3
      D1[m,n] = innerproduct(œá[m], Œ∫[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(Œ∫[n]*(HH-Œ≥)))
      if(n ‚â§ N+1)
        D2[m,n] = innerproduct(œá[m], k[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(k[n]*HH))
      end
      D3[m,n] = innerproduct(k[m], Œ∫[n], HH, Œ≥)/(cos(k[m]*HH)*cos(Œ∫[n]*(HH-Œ≥)))
    end
  end

  A = diagm(vec(0.5*(cos.(k*HH).*sin.(k*HH) + k*HH)./(k.*(cos.(k*HH)).^2)))

  B1 = hcat(-D1, -D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1)))
  B2 = hcat(D3.*transpose(repeat(Œ∫, 1, N+1)), D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1)))
  B3 = hcat(D1.*transpose(repeat(Œ∫.*exp.(-Œ∫*LL), 1, N+1)), -D1.*transpose(repeat((Œ∫), 1, N+1)))

  B4 = zeros(ComplexF64, N+1, 4)
  if(ptype==FreeClamped)
    B4 = transpose(hcat(-Œ∫.*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^2).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥))))
  else
    B4 = transpose(hcat(-Œ∫.*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥))))
  end

  B5 = transpose(hcat(-Œ∫.*tan.(Œ∫*(HH-Œ≥)),
            -(Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)),
            -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL),
            -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL)))

  f1 = -A‚Çö*D2[:,1]
  f2 = zeros(ComplexF64, N+1, 1)
  f2[1] = k[1]*A‚Çö*A[1,1]

  LHS‚ÇÅ = hcat(D2, B1)
  LHS‚ÇÇ = hcat(diagm(vec(Œª)).*A, B2)
  LHS‚ÇÉ = hcat(zeros(ComplexF64,N+1,N+1), B3)
  LHS‚ÇÑ = hcat(zeros(ComplexF64,4,N+1), B4, B5)

  LHS = vcat(LHS‚ÇÅ, LHS‚ÇÇ, LHS‚ÇÉ, LHS‚ÇÑ)
  RHS = vcat(f1, f2, zeros(ComplexF64, N+1, 1), zeros(ComplexF64, 4, 1))
  sol = LHS\RHS
  a‚Çò = sol[1:N+1]
  c‚Çò = sol[N+2:end]
  c‚Çò‚Å∫ = c‚Çò[1:N+3]
  c‚Çò‚Åª = c‚Çò[N+4:2N+6]
  FiniteDepthSolution(a‚Çò, c‚Çò‚Å∫, c‚Çò‚Åª, vec(k), Œ∫, vec(zeros(ComplexF64,2,1)),
                      vec(zeros(ComplexF64,2,1)), ndp, ptype)
end
function u‚ÇÅ(x, sol::FiniteDepthSolution)
  Œ± = sol.ndp.Œ±
  g = sol.ndp.geo[end]
  ùëô = sol.ndp.ùëô
  œâ = ‚àö(Œ±*g/ùëô)
  c‚Çò‚Å∫ = sol.c‚Çò‚Å∫
  c‚Çò‚Åª = sol.c‚Çò‚Åª
  LL = sol.ndp.geo[1]
  HH = sol.ndp.geo[2]
  Œ≥ = sol.ndp.Œ≥
  Œ∫ = sol.Œ∫‚Çò

  X = 0*x
  for m in 1:length(c‚Çò‚Å∫)
    X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                        + c‚Çò‚Å∫[m]*exp.(Œ∫[m]*(x .-LL))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
  end
  X
end

############################################
# Finite depth model with grounding line
############################################
