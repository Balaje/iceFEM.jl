using Pkg
# Pkg.add("Polynomials")
using Polynomials
using Plots

# Physical quantities
œÅ‚Çí = 1025
œÅ·µ¢ = 922.5
E·µ¢ = 2e9
ŒΩ = 0.3
k‚ÇÄ = 1e8 # Spring constant for the bed.

# Dimensional quantities
L = 40000
H = 800
h = 500

# Derived quantities
d = (œÅ·µ¢/œÅ‚Çí)*h
œâ = 2œÄ/2000
g = 9.8
D = E·µ¢*h^3/(12*(1-ŒΩ^2))
ùëô = (D/(œÅ‚Çí*g))^0.25
ùëò = (k‚ÇÄ/(œÅ‚Çí*g))^0.25
Œ≥ = d/ùëô
Œ± = (œâ^2*ùëô)/(g)
X = (H-d)/(1im*œâ*ùëô^2)
A‚Çö = g/(1im*œâ)
xg = 0.7*L/ùëô# Grounding line position

# Solve the characteristic equation and collect the roots
# 1) Beam-Fluid
pl = Polynomial([Œ±*ùëô/(H-d), 0, 1-Œ≥*Œ±, 0, 0, 0, 1])
m = roots(pl)
m = m[sortperm(real(m), rev=true)]

# 2) Beam-bedrock
#pl = Polynomial([1, 0, 0, 0, 1 + ùëò^4 - Œ≥*Œ±])
pl = Polynomial([1 + ùëò^4 - Œ≥*Œ±, 0, 0, 0, 1])
p = roots(pl)
p‚ÇÅ = p[(real(p) .> 1e-9)][1]
p‚ÇÇ = p[(real(p) .> 1e-9)][2]

# 3) Open-ocean
k = sqrt(Œ±*ùëô/H)

# Construct the linear system
A = zeros(ComplexF64, 9, 9)
A[1,:] = [m[1]^4, m[2]^4, m[3]^4, m[4]^4, m[5]^4*exp(m[5]*xg), m[6]^4*exp(m[6]*xg), 0, 0, 0]
A[2,:] = [-m[1]^5, -m[2]^5, m[3]^5, m[4]^5, -m[5]^5*exp(m[5]*xg), -m[6]^5*exp(m[6]*xg), 0, 0, 0]
A[3,:] = [1, 1, 1, 1, exp(m[5]*xg), exp(m[6]*xg), -1, 0, 0]
A[4,:] = [-m[1], -m[2], m[3], m[4], -m[5]*exp(m[5]*xg), -m[6]*exp(m[6]*xg), 1im*k*H/(H-d), 0, 0]
A[5,:] = [X*m[1]^2*exp(-m[1]*xg), X*m[2]^2*exp(-m[2]*xg), X*m[3]^2*exp(m[3]*xg),
          X*m[4]^2*exp(m[4]*xg), X*m[5]^2, X*m[6]^2, 0,
          -1, -1]
A[6,:] = [-X*m[1]^3*exp(-m[1]*xg), -X*m[2]^3*exp(-m[2]*xg), X*m[3]^3*exp(m[3]*xg),
          X*m[4]^3*exp(m[4]*xg), -X*m[5]^3, -X*m[6]^3, 0,
          p‚ÇÅ, p‚ÇÇ]
A[7,:] = [X*m[1]^4*exp(-m[1]*xg), X*m[2]^4*exp(-m[2]*xg), X*m[3]^4*exp(m[3]*xg),
          X*m[4]^4*exp(m[4]*xg), X*m[5]^4, X*m[6]^4, 0,
          -p‚ÇÅ^2, -p‚ÇÇ^2]
A[8,:] = [-X*m[1]^5*exp(-m[1]*xg), -X*m[2]^5*exp(-m[2]*xg), X*m[3]^5*exp(m[3]*xg),
          X*m[4]^5*exp(m[4]*xg), -X*m[5]^5, -X*m[6]^5, 0,
          p‚ÇÅ^3, p‚ÇÇ^3]
A[9,:] = [-m[1]*exp(-m[1]*xg), -m[2]*exp(-m[2]*xg), m[3]*exp(m[3]*xg), m[4]*exp(m[4]*xg),
          -m[5], -m[6], 0, 0, 0]

f = [0, 0, A‚Çö, 1im*k*A‚Çö*H/(H-d), 0, 0, 0, 0, 0]

x = A\f

# Displacement profiles
c = x[1:6]
a‚ÇÄ = x[7]
@show abs(a‚ÇÄ/A‚Çö)
b = x[8:9]
p = [p‚ÇÅ, p‚ÇÇ]
function u‚ÇÅ(x, m, c)
  @assert length(m) == length(c)
  X*(c[1]*m[1]^2*exp.(-m[1]*x) +
    c[2]*m[2]^2*exp.(-m[2]*x) +
    c[3]*m[3]^2*exp.(m[3]*x) +
    c[4]*m[4]^2*exp.(m[4]*x) +
    c[5]*m[5]^2*exp.(-m[5]*(x .- xg)) +
    c[6]*m[6]^2*exp.(-m[6]*(x .- xg)))
end
function u‚ÇÇ(x, p, b)
  @assert length(p) == length(b)
  b[1]*exp.(-p[1]*(x .-xg)) + b[2]*exp.(-p[2]*(x .-xg))
end

x‚ÇÅ = 0:0.01:xg

x‚ÇÇ = xg:0.01:L/ùëô
U‚ÇÅ = u‚ÇÅ(x‚ÇÅ, m, c)
U‚ÇÇ = u‚ÇÇ(x‚ÇÇ, p, b)

plt = plot(x‚ÇÅ, abs.(U‚ÇÅ))
plot!(plt, x‚ÇÇ, abs.(U‚ÇÇ))
