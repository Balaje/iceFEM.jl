########################################
# Script to compare wave numbers
########################################
using iceFEM
using Plots

ice = Ice(922.5, 2e9, 0.3, 3630, 80)
fluid = Fluid(1025, 0, 9.8, 500, 0); # 500m water

########################################
# Plot the roots of the dispersion equation
########################################
œâ‚Çõ = 2œÄ*LinRange(1/500,1/20,200);
NModes = 4
Œ∫‚Çú = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œ∫·µ£ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
k = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÅ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÇ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÉ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
for m=1:length(œâ‚Çõ)
  local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
  Œ∫‚Çú[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])/ndp.ùëô
  Œ∫·µ£[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/0.9274, ndp.geo[3]^2, NModes, ndp.geo[2])/ndp.ùëô
  k[m,:] = dispersion_free_surface(ndp.Œ±, NModes, ndp.geo[2])/ndp.ùëô

  R‚ÇÅ[m,:] = map(x -> iceFEM.DispersionEquations.f(x, ndp.Œ±*ndp.geo[2],
                                                  1. /ndp.geo[2]^4,
                                                  ndp.Œ≥/ndp.geo[2]),
                Œ∫‚Çú[m,:]*ndp.ùëô*1im*ndp.geo[2]) # Non-dim the input
  R‚ÇÇ[m,:] = map(x -> iceFEM.ReissnerMindlinPlate.f(x, ndp.Œ±, 1., ndp.Œ≥,
                                                   ndp.geo[end]/0.9274, ndp.geo[3]^2,
                                                   ndp.geo[2]),
                Œ∫‚Çú[m,:]*ndp.ùëô*1im)
  R‚ÇÉ[m,:] = map(x -> iceFEM.ReissnerMindlinPlate.f(x, ndp.Œ±, 1., ndp.Œ≥,
                                                   ndp.geo[end]/0.9274, ndp.geo[3]^2,
                                                   ndp.geo[2]),
                Œ∫·µ£[m,:]*ndp.ùëô*1im)
end
pl = plot(figsize=[20,4])
pl‚ÇÇ = plot()
pl‚Çò = plot()
#for ind = vcat(1:2,4:5)
for ind = [1,2,4,5]
  plot!(pl, 2œÄ./œâ‚Çõ, ice.h^-1*2œÄ./abs.(Œ∫‚Çú[:,ind]), linewidth=2, xlim=(20,200),
        yaxis=:log10, xaxis=:log10, label="(KL) Root = "*string(ind),
        linestyle=:dash)
  plot!(pl, 2œÄ./œâ‚Çõ, ice.h^-1*2œÄ./abs.(Œ∫·µ£[:,ind]), linewidth=2, xlim=(20,200),
        yaxis=:log10, xaxis=:log10, label="(RM) Root = "*string(ind),
        legend=:outertopright)
  xlabel!(pl, "\$ T \$ (in s)")
  ylabel!(pl, "\$ \\frac{\\lambda}{h} \$")

  ## Study difference in wave-lengths
  # plot!(pl‚ÇÇ, 2œÄ./œâ‚Çõ, ice.L^-1*abs.(2œÄ./abs.(Œ∫·µ£[:,ind]) - 2œÄ./(abs.(Œ∫‚Çú[:,ind]))), linewidth=1,
  #       #yaxis=:log10, xaxis=:log10,
  #       label="H = "*string(fluid.H)*" m Mode = "*string(ind), legend=:topright)
  # xlabel!(pl‚ÇÇ, "\$ T \$ (in s)")
  # ylabel!(pl‚ÇÇ, "\$ \\frac{|\\lambda_{KL} - \\lambda_{RM}|}{L} \$")

  ## Study difference in wave-numbers
  plot!(pl‚Çò, 2œÄ./œâ‚Çõ, abs.(Œ∫·µ£[:,ind] - Œ∫‚Çú[:,ind])./abs.(Œ∫·µ£[:,ind]), linewidth=2,
        #yaxis=:log10, xaxis=:log10,
        #xlim=(20,200),
        label="Root = "*string(ind), legend=:topright)
  xlabel!(pl‚Çò, "\$ T \$ (in s)")
  ylabel!(pl‚Çò, "\$ |\\kappa_{KL} - \\kappa_{RM}|/|\\kappa_{RM}| \$")

  ## Study the residual
  plot!(pl‚ÇÇ, 2œÄ./œâ‚Çõ, abs.(R‚ÇÇ[:,ind]), linewidth=2,
        #yaxis=:log10, xaxis=:log10,
        #xlim=(20,500),
        label="DEq·µ£‚Çò(Œ∫‚Çñ‚Çó) Root = "*string(ind), legend=:topright)
  xlabel!(pl‚ÇÇ, "\$ T \$ (in s)")
  ylabel!(pl‚ÇÇ, "Residual")
end
title!(pl, "H = "*string(fluid.H)*" m")
title!(pl‚ÇÇ, "H = "*string(fluid.H)*" m")
title!(pl‚Çò, "H = "*string(fluid.H)*" m")
vline!(pl, [50], label="T=50 s", linewidth=0.5, linestyle=:dash)
vline!(pl‚ÇÇ, [50], label="T=50 s", linewidth=0.5, linestyle=:dash)
vline!(pl‚Çò, [50], label="T=50 s", linewidth=0.5, linestyle=:dash)

####### Solve the 50s problem
œâ = 2œÄ/12
sol = solve(ice, fluid, œâ, FreeFree(), FiniteDepth(0), ReissnerMindlinIce(); Œº=0.9274)
x = LinRange(0,sol.ndp.geo[1],200);
U·µ£‚Çò = u‚ÇÅ(x, sol);
pl‚ÇÉ = plot(x, abs.(U·µ£‚Çò), label="R-M Plate", linewidth=2, color=:blue)
sol1 = solve(ice, fluid, œâ, FreeFree(), FiniteDepth(0));
x = LinRange(0,sol1.ndp.geo[1],200);
U‚Çñ‚Çó = u‚ÇÅ(x, sol1);
plot!(pl‚ÇÉ, x, abs.(U‚Çñ‚Çó), label="K-L Plate", linewidth=2, color=:red)

######## Analyse the complex root with the thin-plate problem
fluid = Fluid(1025, 0, 9.8, 500, 0) # 500m water
hs = [12.5, 25, 50, 100, 200]
Œ∫·µ£ = zeros(ComplexF64, length(œâ‚Çõ), NModes+1, length(hs))
Œ∫‚Çú = zeros(ComplexF64, length(œâ‚Çõ), NModes+1, length(hs))
for (h,j) in zip(hs,1:length(hs))
  local ice = Ice(922.5, 2e9, 0.3, 3630, h)
  for m in 1:length(œâ‚Çõ)
    local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
    Œ∫‚Çú[m,:,j] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])/ndp.ùëô
    Œ∫·µ£[m,:,j] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/0.9274, ndp.geo[3]^2, NModes, ndp.geo[2])/ndp.ùëô
  end
end

pls = fill(plot(),NModes+1)
for i in 1:NModes+1
  tmp = plot()
  for j in 1:length(hs)
    err = abs.(Œ∫·µ£[:,i,j]-Œ∫‚Çú[:,i,j])./abs.(Œ∫·µ£[:,i,j])
    (i == 5) ? plot!(tmp, 2œÄ./œâ‚Çõ, err,  label="h = "*string(hs[j])*" m", linewidth=2, legend=:outertopright, xlim=(20,200)) :
      plot!(tmp, 2œÄ./œâ‚Çõ, err, linewidth=2, label="",
            #xlim=(20,200)
            )
  end
  title!(tmp, "Root "*string(i))
  xlabel!(tmp, "\$ T \$ (in s)")
  ylabel!(tmp, "\$ |\\kappa_{KL} - \\kappa_{RM}|/|\\kappa_{RM}| \$")
  (i == 5) ? vline!(tmp, [50], label="T=50 s", linewidth=0.5, linestyle=:dash, legend=:topright) :
    vline!(tmp, [50], label="", linewidth=0.5, linestyle=:dash)
  pls[i] = tmp
end
pl‚ÇÑ = plot(pls[1], pls[2], pls[4], pls[5], layout=(2,2))

########## Analyse the complex root with increasing Œº
ice = Ice(922.5, 2e9, 0.3, 3630, 200)
fluid = Fluid(1025, 0, 9.8, 500, 0); # 500m water
œâ‚Çõ = 2œÄ*LinRange(1/1000,1/400,200);
Œ∫‚Çú = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œ∫·µ£ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œ∫·µ£¬π = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œº1 = 0.9274
pl‚ÇÖ = plot()
for m=1:length(œâ‚Çõ)
  local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
  Œ∫‚Çú[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])/ndp.ùëô
  Œ∫·µ£[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/Œº1, ndp.geo[3]^2, NModes, ndp.geo[2])/ndp.ùëô
end
Œº2 = 8
for m=1:length(œâ‚Çõ)
  local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
  Œ∫·µ£¬π[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/Œº2, ndp.geo[3]^2, NModes, ndp.geo[2])/ndp.ùëô
end
for mode=[1,2,4]
  err = abs.(Œ∫·µ£[:,mode]-Œ∫‚Çú[:,mode])./abs.(Œ∫·µ£[:,mode])
  err1 = abs.(Œ∫·µ£¬π[:,mode]-Œ∫‚Çú[:,mode])./abs.(Œ∫·µ£¬π[:,mode])
  plot!(pl‚ÇÖ, 2œÄ./œâ‚Çõ, err, label="|Œª‚Çñ - Œª·µ£|/|Œª·µ£| Thick-plate Œº = "*string(Œº1)*" Mode "*string(mode), linewidth=1)
  plot!(pl‚ÇÖ, 2œÄ./œâ‚Çõ, err1, label="|Œª‚Çñ - Œª·µ£|/|Œª·µ£| Thick-plate Œº = "*string(Œº2)*" Mode "*string(mode), linewidth=1)#, xaxis=:log10, yaxis=:log10)
end
##############################
# Fox and Squire plot
##############################
# ice = Ice(922.5, 6e9, 0.3, 40000, 200)
# fluid = Fluid(1025, 0, 9.8, 1000, 0); #1000 m water (Replace 500m for the other depth)
# œâ‚Çõ = 2œÄ*LinRange(1/60,1,200)
# Œ∫‚Çú = zeros(ComplexF64, length(œâ‚Çõ))
# Œ∫·µ£ = zeros(ComplexF64, length(œâ‚Çõ))
# k = zeros(ComplexF64, length(œâ‚Çõ))
# #pl‚ÇÅ = plot()
# for m=1:length(œâ‚Çõ)
#   local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
#   Œ∫‚Çú[m] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, 2, ndp.geo[2])[1]/ndp.ùëô
#   Œ∫·µ£[m] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/0.9271, ndp.geo[3]^2, 2, ndp.geo[2])[1]/ndp.ùëô
#   k[m] = dispersion_free_surface(ndp.Œ±, 2, ndp.geo[2])[1]/ndp.ùëô
# end
# plot!(pl‚ÇÅ, 2œÄ./œâ‚Çõ, 2œÄ./abs.(Œ∫‚Çú), linewidth=1, linecolor="red",
# yaxis=:log10, xaxis=:log10, label="1000 m (Thin-plate)", linestyle=:dot)

# plot!(pl‚ÇÅ, 2œÄ./œâ‚Çõ, 2œÄ./abs.(Œ∫·µ£), linewidth=1, linecolor="blue",
# yaxis=:log10, xaxis=:log10, label="1000 m (Thick-plate)", linestyle=:dot)

# plot!(pl‚ÇÅ, 2œÄ./œâ‚Çõ, 2œÄ./abs.(k), linewidth=1, linecolor="green",
# yaxis=:log10, xaxis=:log10, label="1000 m (Ocean)", linestyle=:dot,
# legend=:bottomright, xlim=(1,60))

#########################################################
# Plot the shear coefficient as a function of frequency
#########################################################
# ice = Ice(922.5, 2e9, 0.33, 40000, 200)
# fluid = Fluid(1025, 0, 9.8, 500, 0); # 100m water
# œâ‚Çõ = 2œÄ*LinRange(0.01,0.1,200);
# Œº‚Çõ = zeros(ComplexF64, length(œâ‚Çõ))
# function findŒº(k, Œ±, Œ≥, Œ¥, Œ∂, H)
#   den = (-Œ± - k^5*tan(k*H) - Œ≥*Œ±*Œ∂/12*k^3*tan(k*H) - (1-Œ≥*Œ±)*k*tan(k*H))
#   num = (Œ¥/Œ∂*(1-Œ≥*Œ±)*k^3*tan(k*H) + Œ¥/12*(Œ≥*Œ±)^2*k*tan(k*H) - Œ¥*Œ±*Œ≥/12*k*tan(k*H) - Œ±*Œ¥*k^2/Œ∂ - Œ≥*Œ±^2*Œ¥/12)
#   abs(num/den)
# end
# for m=1:length(œâ‚Çõ)
#   local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
#   Œ∫‚Çú[m] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, 2, ndp.geo[2]-ndp.Œ≥)[1]
#   Œº‚Çõ[m] = findŒº(Œ∫‚Çú[m], ndp.Œ±, ndp.Œ≥, ndp.geo[end], ndp.geo[3]^2, ndp.geo[2] - ndp.Œ≥)
# end
# pl‚ÇÜ = plot(œâ‚Çõ/(2œÄ), abs.(Œº‚Çõ), linewidth=2, label="Œº(œâ)")
# xlabel!(pl‚ÇÜ, "\$\\omega/(2\\pi)\$ (Hz)")
# ylabel!(pl‚ÇÜ, "\$\\mu\$ (Shear correction factor)")
# for (clr,f) ‚àà zip([:red, :green, :black], [1/20, 1/30, 1/50])
#   local œâ = 2œÄ*f
#   local ndp = non_dimensionalize(ice, fluid, œâ, ReissnerMindlinIce())
#   k1 = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, 2, ndp.geo[2]-ndp.Œ≥)[1]
#   Œº1 = findŒº(k1, ndp.Œ±, ndp.Œ≥, ndp.geo[end], ndp.geo[3]^2, ndp.geo[2] - ndp.Œ≥)
#   @show Œº1, f
#   vline!(pl‚ÇÜ, [f], label="T = "*string(1/f)*" s", linecolor=clr, linestyle=:dash, legend=false, linewidth=0.3)
#   hline!(pl‚ÇÜ, [Œº1], label="Œº = "*string(Œº1), linecolor=clr, linestyle=:dash, legend=false, linewidth=0.3)
#   annotate!(pl‚ÇÜ, f + 0.2*f, Œº1 + 0.2*Œº1, text("(T,Œº) = ("*string(1/f)*","*string(round(Œº1, digits=3))*")", 10))
# end
