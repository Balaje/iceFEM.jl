############################################################
# ... Continuing the wave-numbers script from WaveNumbers.jl
############################################################

using iceFEM
using Plots
ice = Ice(922.5, 2e9, 0.3, 3630, 80)
fluid = Fluid(1025, 0, 9.8, 500, 0); # 500m water
NModes = 4
Œ∫‚Çú = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œ∫·µ£ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
k = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÅ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÇ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
R‚ÇÉ = zeros(ComplexF64, length(œâ‚Çõ),NModes+1)
Œº‚Çõ = [1,2,4,8,16]
pl‚Çá = plot()
œâ‚Çõ = 2œÄ*LinRange(1/500,1/20,200)
for Œº in Œº‚Çõ
  for m=1:length(œâ‚Çõ)
    local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
    Œ∫‚Çú[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])/ndp.ùëô
    Œ∫·µ£[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/Œº, ndp.geo[3]^2, NModes, ndp.geo[2])/ndp.ùëô
    k[m,:] = dispersion_free_surface(ndp.Œ±, NModes, ndp.geo[2])/ndp.ùëô

    R‚ÇÅ[m,:] = map(x -> iceFEM.DispersionEquations.f(x, ndp.Œ±*ndp.geo[2],
                                                    1. /ndp.geo[2]^4,
                                                    ndp.Œ≥/ndp.geo[2]),
                  Œ∫‚Çú[m,:]*ndp.ùëô*1im*ndp.geo[2]) # Non-dim the input
    R‚ÇÇ[m,:] = map(x -> iceFEM.ReissnerMindlinPlate.f(x, ndp.Œ±, 1., ndp.Œ≥,
                                                     ndp.geo[end]/Œº, ndp.geo[3]^2,
                                                     ndp.geo[2]),
                  Œ∫‚Çú[m,:]*ndp.ùëô*1im)
    R‚ÇÉ[m,:] = map(x -> iceFEM.ReissnerMindlinPlate.f(x, ndp.Œ±, 1., ndp.Œ≥,
                                                     ndp.geo[end]/Œº, ndp.geo[3]^2,
                                                     ndp.geo[2]),
                  Œ∫·µ£[m,:]*ndp.ùëô*1im)
  end

  choice = 2
  err = abs.(R‚ÇÇ[:,2]) # Only for the second root
  (choice==2) && (err = abs.(Œ∫·µ£[:,2] - Œ∫‚Çú[:,2])./abs.(Œ∫·µ£[:,2]))
  plot!(pl‚Çá, 2œÄ./œâ‚Çõ, err, legend=:topleft, label="Œº = "*string(Œº), linewidth=2)
  xlabel!(pl‚Çá, "\$ T \$ (in s)")
  ylabel!(pl‚Çá, "Residual")
  (choice==2) && ylabel!(pl‚Çá, "Error")
end

#############################
# Plot Œº as a function of œâ #
#############################
function fŒº(k, Œ±, Œ≥, Œ¥, Œ∂, H)
  den = (Œ± - k^5*tanh(k*H) + Œ≥*Œ±*Œ∂/12*k^3*tanh(k*H) - (1-Œ≥*Œ±)*k*tanh(k*H))
  num = (Œ¥/Œ∂*(1-Œ≥*Œ±)*k^3*tanh(k*H) + Œ¥/12*(Œ≥*Œ±)^2*k*tanh(k*H) - Œ¥*Œ±*Œ≥/12*k*tanh(k*H) + Œ±*Œ¥*k^2/Œ∂ + Œ≥*Œ±^2*Œ¥/12)
  abs(num/den)
end
ice = Ice(922.5, 2e9, 0.3, 3630, 280)
pl‚Çà = plot()
œâ‚Çõ = 2œÄ*LinRange(1/100,1/10,200)
Œºs = zeros(ComplexF64, length(œâ‚Çõ))
for m=1:length(œâ‚Çõ)
  local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
  Œ∫‚Çú[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])
  Œºs[m] = fŒº(1im*Œ∫‚Çú[m,1], ndp.Œ±, ndp.Œ≥, ndp.geo[end], ndp.geo[3]^2, ndp.geo[2])
end
plot!(pl‚Çà, 2œÄ./œâ‚Çõ, abs.(Œºs), label="", linewidth=2)
xlabel!(pl‚Çà, "\$ T \$ (in s)")
ylabel!(pl‚Çà, "\$ \\mu\$")

###################################################
# Plot the difference in the dispersion relations #
###################################################
function ŒîDE(k, Œ±, Œ≥, Œ¥, Œ∂, H)
  Œ¥*((1-Œ≥*Œ±)*(Œ≥*Œ±/12 - k^2/Œ∂)*k*tan(k*H) + Œ±*(k^2/Œ∂ - Œ≥)) + k*tan(k*H)*(Œ≥*Œ±*k^2*Œ∂)/12
end
ice = Ice(922.5, 2e9, 0.3, 3630, 200)
pl‚Çâ = plot()
pl‚ÇÅ‚ÇÄ = plot()
œâ‚Çõ = 2œÄ*LinRange(1/1000,1/20,200)
ŒîD‚Çõ1 = zeros(ComplexF64, length(œâ‚Çõ))
ŒîD‚Çõ2 = zeros(ComplexF64, length(œâ‚Çõ))
Œ±‚Çõ = zeros(ComplexF64, length(œâ‚Çõ))
Œº = 1
for m=1:length(œâ‚Çõ)
  local ndp = non_dimensionalize(ice, fluid, œâ‚Çõ[m], ReissnerMindlinIce())
  Œ∫‚Çú[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, NModes, ndp.geo[2])
  Œ∫·µ£[m,:] = dispersion_ice(ndp.Œ±, 1., ndp.Œ≥, ndp.geo[end]/0.9274, ndp.geo[3]^2, NModes, ndp.geo[2])
  ŒîD‚Çõ1[m] = ŒîDE(Œ∫‚Çú[m,1], ndp.Œ±, ndp.Œ≥, ndp.geo[end]/Œº, ndp.geo[3]^2, ndp.geo[2])
  ŒîD‚Çõ2[m] = ŒîDE(Œ∫‚Çú[m,2], ndp.Œ±, ndp.Œ≥, ndp.geo[end]/Œº, ndp.geo[3]^2, ndp.geo[2])
  Œ±‚Çõ[m] = ndp.Œ±/ndp.geo[2]
end
plot!(pl‚Çâ, 2œÄ./œâ‚Çõ, abs.(ŒîD‚Çõ1), label="Travelling wave", linewidth=2)
plot!(pl‚Çâ, 2œÄ./œâ‚Çõ, abs.(ŒîD‚Çõ2), label="Decaying wave", linewidth=2, xaxis=:log10, yaxis=:log10)
xlabel!(pl‚Çâ, "\$ T \$ (in s)")
ylabel!(pl‚Çâ, "\$ \\Delta DE\$")

plot!(pl‚ÇÅ‚ÇÄ, 2œÄ./œâ‚Çõ, abs.(Œ∫‚Çú[:,1]), label="Travelling wave", linewidth=2)
plot!(pl‚ÇÅ‚ÇÄ, 2œÄ./œâ‚Çõ, abs.(Œ∫·µ£[:,2]), label="Decaying wave", linewidth=2)
plot!(pl‚ÇÅ‚ÇÄ, 2œÄ./œâ‚Çõ, abs.(sqrt.(Œ±‚Çõ)), label="|‚àö(Œ±(T)/H)|", linewidth=1, linestyle=:dash, linecolor=:black)
plot!(pl‚ÇÅ‚ÇÄ, 2œÄ./œâ‚Çõ, œâ‚Çõ.^0, label="=1", linewidth=1, linestyle=:dashdotdot, linecolor=:black, xaxis=:log10, yaxis=:log10)
xlabel!(pl‚ÇÅ‚ÇÄ, "\$ T \$ (in s)")
ylabel!(pl‚ÇÅ‚ÇÄ, "\$ |\\kappa_{0,1}|\$")
