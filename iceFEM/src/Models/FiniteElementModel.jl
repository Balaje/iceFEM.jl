##############################################
# Begin file containing the FEM part
##############################################
########################################################
# Functions to obtain the mode shapes of the beam
########################################################
function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeBedrock)
  Œ± = ndp.Œ±
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  xg = ndp.geo[4]
  pl = Polynomial([ùëò^4 - Œ≥*Œ±, 0, 0, 0, 1])
  p = roots(pl)
  if(real(ùëò^4 - Œ≥*Œ±) > 0)
    p‚ÇÅ = p[(real(p) .< 1e-9)][1]
    p‚ÇÇ = p[(real(p) .< 1e-9)][2]
  else
    p‚ÇÅ = p[abs.(real(p)) .< 1e-9][1]
    p‚ÇÇ = p[abs.(real(p)) .< 1e-9][2]
  end
  A = zeros(ComplexF64, 4, 4)
  A[1,:] = [0, 1, 0, -1];
  A[2,:] = [1, 0, -1, 0];
  A[3,:] = [Œ≤^2*sinh(Œ≤*xg) - Œ≤*cosh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) + p‚ÇÅ*p‚ÇÇ*sinh(Œ≤*xg),
            Œ≤^2*cosh(Œ≤*xg) - Œ≤*sinh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) + p‚ÇÅ*p‚ÇÇ*cosh(Œ≤*xg),
            p‚ÇÅ*p‚ÇÇ*sin(Œ≤*xg) - Œ≤*cos(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤^2*sin(Œ≤*xg),
            Œ≤*sin(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤^2*cos(Œ≤*xg) + p‚ÇÅ*p‚ÇÇ*cos(Œ≤*xg)]
  A[4,:] = [Œ≤^3*cosh(Œ≤*xg) - Œ≤*cosh(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*sinh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ),
            Œ≤^3*sinh(Œ≤*xg) - Œ≤*sinh(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*cosh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ),
            p‚ÇÅ*p‚ÇÇ*sin(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤*cos(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) - Œ≤^3*cos(Œ≤*xg),
            Œ≤^3*sin(Œ≤*xg) + Œ≤*sin(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*cos(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ)]
  b = zeros(ComplexF64, 4, 1)
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  I4 = diagm([1, 1, 1, 1])
  ev = eigvals(A, I4)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A,I4)[:,ind]

  # Find the bedrock displacement
  Œ∑g = c[1]*sinh(Œ≤*xg) + c[2]*cosh(Œ≤*xg) + c[3]*sin(Œ≤*xg) + c[4]*cos(Œ≤*xg)
  ‚àÇ‚ÇìŒ∑g = c[1]*Œ≤*cosh(Œ≤*xg) + c[2]*Œ≤*sinh(Œ≤*xg) + c[3]*Œ≤*cos(Œ≤*xg) - c[4]*Œ≤*sin(Œ≤*xg)
  A = [1 1; p‚ÇÅ p‚ÇÇ]
  f = [Œ∑g, ‚àÇ‚ÇìŒ∑g]
  b = A\f
  (c, [p‚ÇÅ, p‚ÇÇ], (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x))*(1/(c[2]+c[4])))
end
function Œæ‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeBedrock)
  xg = ndp.geo[4]
  c, p, _ = Œ∑‚Çñ(xg, Œ≤, ndp, FreeBedrock())
  Œ∑g = (c[1]*sinh(Œ≤*xg) + c[2]*cosh(Œ≤*xg) + c[3]*sin(Œ≤*xg) + c[4]*cos(Œ≤*xg))*(1/(c[2]+c[4]))
  ‚àÇ‚ÇìŒ∑g = (c[1]*Œ≤*cosh(Œ≤*xg) + c[2]*Œ≤*sinh(Œ≤*xg) + c[3]*Œ≤*cos(Œ≤*xg) - c[4]*Œ≤*sin(Œ≤*xg))*(1/(c[2]+c[4]))
  A = [1 1; p[1] p[2]]
  f = [Œ∑g, ‚àÇ‚ÇìŒ∑g]
  b = A\f
  (b, b[1]*exp.(p[1]*(x .- xg)) + b[2]*exp.(p[2]*(x .- xg)))
end

function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeClamped)
  xg = ndp.geo[4]
  A = [0 1 0 -1;
       1 0 -1 0;
       sinh(Œ≤*xg) cosh(Œ≤*xg) sin(Œ≤*xg) cos(Œ≤*xg);
       cosh(Œ≤*xg) sinh(Œ≤*xg) cos(Œ≤*xg) -sin(Œ≤*xg)]
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  I4 = diagm([1, 1, 1, 1])
  b = zeros(ComplexF64, 4, 1)
  ev = eigvals(A, I4)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A,I4)[:,ind]
  # Return displacement
  (c, (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x))*(1/(c[2]+c[4])) )
end
function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeHinged)
  xg = ndp.geo[4]
  A = [0 1 0 -1;
       1 0 -1 0;
       sinh(Œ≤*xg) cosh(Œ≤*xg) sin(Œ≤*xg) cos(Œ≤*xg);
       sinh(Œ≤*xg) cosh(Œ≤*xg) -sin(Œ≤*xg) -cos(Œ≤*xg)]
  b = zeros(ComplexF64, 4, 1)
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  I4 = diagm([1, 1, 1, 1])
  ev = eigvals(A, I4)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A,I4)[:,ind]
  # Return displacement
  (c, (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x))*(1/(c[2]+c[4])))
end

function _plot_compare_dispersion_equation(sol‚ÇÅ::Union{ShallowWaterSolution, FiniteDepthSolution})
  ndp = sol‚ÇÅ.ndp
  xg = sol‚ÇÅ.ndp.geo[4]
  beta‚Çõ = 0.001:0.001:10*œÄ/xg
  fbeta‚Çõ = zeros(ComplexF64,length(beta‚Çõ),1)
  ùëò = sol‚ÇÅ.ndp.ùëò
  for m=1:length(beta‚Çõ)
    fbeta‚Çõ[m] = _dispersion_composite_beam(beta‚Çõ[m], ndp)
  end
  plt = plot(beta‚Çõ, real.(fbeta‚Çõ), label="Composite beam", color=:green)
  # Plot the dispersion equation of the clamped beam
  plot!(plt, beta‚Çõ, (cos.(beta‚Çõ*xg) + 1 ./cosh.(beta‚Çõ*xg)), label="Clamped beam",
        line=(:dot, 1), color=:red)
  plot!(plt, beta‚Çõ, (cos.(beta‚Çõ*xg).*tanh.(beta‚Çõ*xg) - sin.(beta‚Çõ*xg)),
        label="Hinged beam", line=(:dot, 1), color=:blue)
  plot!(plt, beta‚Çõ, 0*beta‚Çõ, label="0", line=(:dot, 2), color=:magenta)
  title!(plt, "\$k_0 = "*string(round(ùëò,digits=4))*"\$")
  display(plt)
end

function _plot_invacuo_ice_eb(ndp::NonDimensionalProblem, modeNo::Int64)
  ùëò = ndp.ùëò
  Œ≥ = ndp.Œ≥
  Œ± = ndp.Œ±
  xg = ndp.geo[4]
  LL = ndp.geo[1]
  # Bedrock problem
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeBedrock())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  x‚ÇÅ = 0:0.01:ndp.geo[4]
  _, _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeBedrock())
  x‚ÇÇ = xg:0.01:LL

  _, y‚ÇÇ = Œæ‚Çñ(x‚ÇÇ, Œ≤, ndp, FreeBedrock())
  plt = plot(x‚ÇÅ, real(y‚ÇÅ), label="\$ x < x_g\$", color=:green, line=(:solid, 2))
  plot!(plt, x‚ÇÇ, real(y‚ÇÇ), label="\$ x > x_g\$", color=:brown, line=(:solid, 2))

  # Free Clamped beam
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeClamped())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeClamped())
  plot!(plt, x‚ÇÅ, real(y‚ÇÅ), label="Clamped", color=:blue, line=(:dash, 1))
  plot!(plt, x‚ÇÇ, 0*real(x‚ÇÇ), label="Rigid Bed", color=:black, line=(:solid, 1))

  # Free Hinged beam
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeHinged())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeHinged())
  plot!(plt, x‚ÇÅ, real(y‚ÇÅ), label="Hinged", color=:red, line=(:dash, 1))


  title!(plt, "Mode \$"*string(modeNo)*"\$")
  plt
end
