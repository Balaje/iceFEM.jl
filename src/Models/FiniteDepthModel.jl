struct FiniteDepth
  N::Int64
end
FiniteDepth() = FiniteDepth(3)
struct FiniteDepthSolution{T<:ComplexF64}
  a‚Çò::Vector{T}
  c‚Çò‚Åª::Vector{T}
  c‚Çò‚Å∫::Vector{T}
  k‚Çò::Vector{T}
  Œ∫‚Çò::Vector{T}
  p::Vector{T}
  b::Vector{T}
  ndp::NonDimensionalProblem
  K::Matrix{T}
  f::Vector{T}
  BeamType
end

function solve(Ice::Ice, Fluid::Fluid, œâ, fd::FiniteDepth)
  solve(Ice, Fluid, œâ, FreeClamped(), fd)
end

function solve(Ice::Ice, Fluid::Fluid, œâ, ptype::Union{FreeClamped, FreeHinged}, fd::FiniteDepth)
  N = fd.N
  ndp = non_dimensionalize(Ice, Fluid, œâ)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  g = ndp.geo[end]
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  X = ndp.X
  œâ = ‚àö(Œ±*g/ùëô)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  d = Œ≥*ùëô
  A‚Çö = g/(1im*œâ)

  k = dispersion_free_surface(Œ±, N, HH)
  Œ∫ = dispersion_ice(Œ±, 1., Œ≥, N+2, HH-Œ≥)

  function innerproduct(k, kappa, H, d)
    if(abs(k-kappa)>=1e-7)
      return ( (kappa*sin(kappa*(H-d))*cos(k*(H-d)) - k*cos(kappa*(H-d))*sin(k*(H-d)))/(kappa^2-k^2) );
    else
      return ( (H-d)/2 + sin(2*k*(H-d))/(4*k) );
    end
  end

  œá = (0:N)*(œÄ/(HH-Œ≥))
  Œª = k; Œª[1] = k[1]

  D1 = zeros(ComplexF64, N+1, N+3)
  D2 = zeros(ComplexF64, N+1, N+1)
  D3 = zeros(ComplexF64, N+1, N+3)

  for m=1:N+1
    for n=1:N+3
      D1[m,n] = innerproduct(œá[m], Œ∫[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(Œ∫[n]*(HH-Œ≥)))
      if(n ‚â§ N+1)
        D2[m,n] = innerproduct(œá[m], k[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(k[n]*HH))
      end
      D3[m,n] = innerproduct(k[m], Œ∫[n], HH, Œ≥)/(cos(k[m]*HH)*cos(Œ∫[n]*(HH-Œ≥)))
    end
  end

  A = diagm(vec(0.5*(cos.(k*HH).*sin.(k*HH) + k*HH)./(k.*(cos.(k*HH)).^2)))

  B1 = hcat(-D1, -D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1)))
  B2 = hcat(D3.*transpose(repeat(Œ∫, 1, N+1)), D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1)))
  B3 = hcat(D1.*transpose(repeat(Œ∫.*exp.(-Œ∫*LL), 1, N+1)), -D1.*transpose(repeat((Œ∫), 1, N+1)))

  B4 = zeros(ComplexF64, N+1, 4)
  B5 = zeros(ComplexF64, N+1, 4)
  if(ptype==FreeClamped())
    B4 = transpose(hcat(-Œ∫.*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^2).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥))))
    B5 = transpose(hcat(-Œ∫.*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL),
                        -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL)))
  else
    B4 = transpose(hcat(-Œ∫.*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^3).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥))))
    B5 = transpose(hcat(-Œ∫.*tan.(Œ∫*(HH-Œ≥)),
                        (Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                        -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL),
                        -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL)))
  end

  f1 = -A‚Çö*D2[:,1]
  f2 = zeros(ComplexF64, N+1, 1)
  f2[1] = k[1]*A‚Çö*A[1,1]

  LHS‚ÇÅ = hcat(D2, B1)
  LHS‚ÇÇ = hcat(diagm(vec(Œª)).*A, B2)
  LHS‚ÇÉ = hcat(zeros(ComplexF64,N+1,N+1), B3)
  LHS‚ÇÑ = hcat(zeros(ComplexF64,4,N+1), B4, B5)

  LHS = vcat(LHS‚ÇÅ, LHS‚ÇÇ, LHS‚ÇÉ, LHS‚ÇÑ)
  RHS = vcat(f1, f2, zeros(ComplexF64, N+1, 1), zeros(ComplexF64, 4, 1))
  sol = LHS\RHS
  a‚Çò = sol[1:N+1]
  c‚Çò = sol[N+2:end]
  c‚Çò‚Åª = c‚Çò[1:N+3]
  c‚Çò‚Å∫ = c‚Çò[N+4:2N+6]
  FiniteDepthSolution(a‚Çò, c‚Çò‚Åª, c‚Çò‚Å∫, vec(k), vec(Œ∫), vec(zeros(ComplexF64,2,1)),
                      vec(zeros(ComplexF64,2,1)), ndp, LHS, vec(RHS), ptype)
end
############################################
# Finite depth model with grounding line
############################################
function solve(Ice::Ice, Fluid::Fluid, œâ, ::FreeBedrock, fd::FiniteDepth)
  N = fd.N
  ndp = non_dimensionalize(Ice, Fluid, œâ)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  g = ndp.geo[end]
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  X = ndp.X
  œâ = ‚àö(Œ±*g/ùëô)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  d = Œ≥*ùëô
  A‚Çö = g/(1im*œâ)
  xg = ndp.geo[4]

  k = dispersion_free_surface(Œ±, N, HH)
  Œ∫ = dispersion_ice(Œ±, 1., Œ≥, N+2, HH-Œ≥)

  function innerproduct(k, kappa, H, d)
    if(abs(k-kappa)>=1e-7)
      return ( (kappa*sin(kappa*(H-d))*cos(k*(H-d)) - k*cos(kappa*(H-d))*sin(k*(H-d)))/(kappa^2-k^2) );
    else
      return ( (H-d)/2 + sin(2*k*(H-d))/(4*k) );
    end
  end

  œá = (0:N)*(œÄ/(HH-Œ≥))
  Œª = k; Œª[1] = k[1]

  D1 = zeros(ComplexF64, N+1, N+3)
  D2 = zeros(ComplexF64, N+1, N+1)
  D3 = zeros(ComplexF64, N+1, N+3)

  for m=1:N+1
    for n=1:N+3
      D1[m,n] = innerproduct(œá[m], Œ∫[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(Œ∫[n]*(HH-Œ≥)))
      if(n ‚â§ N+1)
        D2[m,n] = innerproduct(œá[m], k[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(k[n]*HH))
      end
      D3[m,n] = innerproduct(k[m], Œ∫[n], HH, Œ≥)/(cos(k[m]*HH)*cos(Œ∫[n]*(HH-Œ≥)))
    end
  end

  A = diagm(vec(0.5*(cos.(k*HH).*sin.(k*HH) + k*HH)./(k.*(cos.(k*HH)).^2)))

  B1 = hcat(-D1, -D1.*transpose(repeat(exp.(-Œ∫*xg), 1, N+1)))
  B2 = hcat(D3.*transpose(repeat(Œ∫, 1, N+1)), D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*xg), 1, N+1)))
  B3 = hcat(D1.*transpose(repeat(Œ∫.*exp.(-Œ∫*xg), 1, N+1)), -D1.*transpose(repeat((Œ∫), 1, N+1)))


  # Solve the beam-fluid dispersion equation
  m = PolynomialRoots.roots([Œ±/(HH-Œ≥), 0, 1-Œ≥*Œ±, 0, 0, 0, 1])
  m = m[sortperm(real(m), rev=true)]
  # Solve the beam-bedrock equation
  p = PolynomialRoots.roots([ùëò^4 - Œ≥*Œ±, 0, 0, 0, 1])
  p‚ÇÅ = 0; p‚ÇÇ = 0
  if(real(ùëò^4 - Œ≥*Œ±) > 0)
    p‚ÇÅ = p[(real(p) .> 1e-9)][1]
    p‚ÇÇ = p[(real(p) .> 1e-9)][2]
  else
    p‚ÇÅ = p[abs.(real(p)) .< 1e-9][1]
    p‚ÇÇ = p[abs.(real(p)) .< 1e-9][2]
  end

  p‚ÇÅ = -p‚ÇÅ
  p‚ÇÇ = -p‚ÇÇ
  B4 = transpose(hcat((-Œ∫.^3 - p‚ÇÅ*p‚ÇÇ*Œ∫ - (p‚ÇÅ+p‚ÇÇ)*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*xg),
                      (Œ∫.^4 - p‚ÇÅ*p‚ÇÇ*(p‚ÇÅ+p‚ÇÇ)*Œ∫ - (p‚ÇÅ^2+p‚ÇÇ^2+p‚ÇÅ*p‚ÇÇ)*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*xg),
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                      (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥))))
  B5 = transpose(hcat((-Œ∫.^3 - p‚ÇÅ*p‚ÇÇ*Œ∫ + (p‚ÇÅ+p‚ÇÇ)*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)),
                      (-Œ∫.^4 - p‚ÇÅ*p‚ÇÇ*(p‚ÇÅ+p‚ÇÇ)*Œ∫ + (p‚ÇÅ^2+p‚ÇÇ^2+p‚ÇÅ*p‚ÇÇ)*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)),
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*xg),
                      -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*xg)))

  f1 = -A‚Çö*D2[:,1]
  f2 = zeros(ComplexF64, N+1, 1)
  f2[1] = k[1]*A‚Çö*A[1,1]

  LHS‚ÇÅ = hcat(D2, B1)
  LHS‚ÇÇ = hcat(diagm(vec(Œª)).*A, B2)
  LHS‚ÇÉ = hcat(zeros(ComplexF64,N+1,N+1), B3)
  LHS‚ÇÑ = hcat(zeros(ComplexF64,4,N+1), B4, B5)

  LHS = vcat(LHS‚ÇÅ, LHS‚ÇÇ, LHS‚ÇÉ, LHS‚ÇÑ)
  RHS = vcat(f1, f2, zeros(ComplexF64, N+1, 1), zeros(ComplexF64, 4, 1))
  sol = LHS\RHS
  a‚Çò = sol[1:N+1]
  c‚Çò = sol[N+2:end]
  c‚Çò‚Åª = c‚Çò[1:N+3]
  c‚Çò‚Å∫ = c‚Çò[N+4:2N+6]

  # Find the coefficients of the bedrock part
  fd = FiniteDepthSolution(a‚Çò, c‚Çò‚Åª, c‚Çò‚Å∫, vec(k), vec(Œ∫), vec(zeros(ComplexF64,2,1)),
                           vec(zeros(ComplexF64,2,1)), ndp, LHS, vec(RHS), FreeBedrock())
  Œ∑g = u‚ÇÅ(xg, fd)
  ‚àÇ‚ÇìŒ∑g = ‚àÇ‚Çìu‚ÇÅ(xg, fd)
  A = [1 1; p‚ÇÅ p‚ÇÇ]
  f = [Œ∑g, ‚àÇ‚ÇìŒ∑g]
  b = A\f
  FiniteDepthSolution(a‚Çò, c‚Çò‚Åª, c‚Çò‚Å∫, vec(k), vec(Œ∫), -[p‚ÇÅ, p‚ÇÇ],
                      vec(b), ndp, LHS, vec(RHS), FreeBedrock())
end

function u‚ÇÅ(x, sol::FiniteDepthSolution)
  Œ± = sol.ndp.Œ±
  g = sol.ndp.geo[end]
  ùëô = sol.ndp.ùëô
  œâ = ‚àö(Œ±*g/ùëô)
  c‚Çò‚Å∫ = sol.c‚Çò‚Å∫
  c‚Çò‚Åª = sol.c‚Çò‚Åª
  LL = sol.ndp.geo[1]
  HH = sol.ndp.geo[2]
  Œ≥ = sol.ndp.Œ≥
  Œ∫ = sol.Œ∫‚Çò
  xg = sol.ndp.geo[4]

  X = 0*x
  if(sol.BeamType isa Union{FreeClamped, FreeHinged, FreeFree})
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*exp.(Œ∫[m]*(x .-LL))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  elseif(sol.BeamType isa FreeBedrock)
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*exp.(Œ∫[m]*(x .- xg))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  end
  X
end
function u‚ÇÇ(x, sol::FiniteDepthSolution)
  xg = sol.ndp.geo[4]
  p = sol.p
  b = sol.b
  @assert length(p) == length(b)
  b[1]*exp.(-p[1]*(x .-xg)) + b[2]*exp.(-p[2]*(x .-xg))
end
######################################################
# Slope, Bending moment, Shear force
######################################################
function ‚àÇ‚Çìu‚ÇÅ(x, sol::FiniteDepthSolution)
  Œ± = sol.ndp.Œ±
  g = sol.ndp.geo[end]
  ùëô = sol.ndp.ùëô
  œâ = ‚àö(Œ±*g/ùëô)
  c‚Çò‚Å∫ = sol.c‚Çò‚Å∫
  c‚Çò‚Åª = sol.c‚Çò‚Åª
  LL = sol.ndp.geo[1]
  HH = sol.ndp.geo[2]
  Œ≥ = sol.ndp.Œ≥
  Œ∫ = sol.Œ∫‚Çò
  xg = sol.ndp.geo[4]

  X = 0*x
  if(sol.BeamType isa Union{FreeClamped, FreeHinged})
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])*exp.(Œ∫[m]*(x .-LL))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  elseif(sol.BeamType isa FreeBedrock)
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])*exp.(Œ∫[m]*(x .- xg))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  end
  X
end
function ‚àÇ‚Çìu‚ÇÇ(x, sol::FiniteDepthSolution)
  xg = sol.ndp.geo[4]
  p = sol.p
  b = sol.b
  @assert length(p) == length(b)
  (-p[1]*b[1]*exp.(-p[1]*(x .-xg))
   -p[2]*b[2]*exp.(-p[2]*(x .-xg)))
end
function ‚àÇ‚Çì¬≤u‚ÇÅ(x, sol::FiniteDepthSolution)
  Œ± = sol.ndp.Œ±
  g = sol.ndp.geo[end]
  ùëô = sol.ndp.ùëô
  œâ = ‚àö(Œ±*g/ùëô)
  c‚Çò‚Å∫ = sol.c‚Çò‚Å∫
  c‚Çò‚Åª = sol.c‚Çò‚Åª
  LL = sol.ndp.geo[1]
  HH = sol.ndp.geo[2]
  Œ≥ = sol.ndp.Œ≥
  Œ∫ = sol.Œ∫‚Çò
  xg = sol.ndp.geo[4]

  X = 0*x
  if(sol.BeamType isa Union{FreeClamped, FreeHinged})
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])^2*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])^2*exp.(Œ∫[m]*(x .-LL))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  elseif(sol.BeamType isa FreeBedrock)
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])^2*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])^2*exp.(Œ∫[m]*(x .- xg))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  end
  X
end
function ‚àÇ‚Çì¬≤u‚ÇÇ(x, sol::FiniteDepthSolution)
  xg = sol.ndp.geo[4]
  p = sol.p
  b = sol.b
  xg = sol.ndp.geo[4]
  @assert length(p) == length(b)
  ((-p[1])^2*b[1]*exp.(-p[1]*(x .-xg)) +
   (-p[2])^2*b[2]*exp.(-p[2]*(x .-xg)))
end
function ‚àÇ‚Çì¬≥u‚ÇÅ(x, sol::FiniteDepthSolution)
  Œ± = sol.ndp.Œ±
  g = sol.ndp.geo[end]
  ùëô = sol.ndp.ùëô
  œâ = ‚àö(Œ±*g/ùëô)
  c‚Çò‚Å∫ = sol.c‚Çò‚Å∫
  c‚Çò‚Åª = sol.c‚Çò‚Åª
  LL = sol.ndp.geo[1]
  HH = sol.ndp.geo[2]
  Œ≥ = sol.ndp.Œ≥
  Œ∫ = sol.Œ∫‚Çò
  xg = sol.ndp.geo[4]

  X = 0*x
  if(sol.BeamType isa Union{FreeClamped, FreeHinged})
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])^3*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])^3*exp.(Œ∫[m]*(x .-LL))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  elseif(sol.BeamType isa FreeBedrock)
    for m in 1:length(c‚Çò‚Å∫)
      X = X + -1/(1im*œâ*ùëô)*(c‚Çò‚Åª[m]*(-Œ∫[m])^3*exp.(-Œ∫[m]*x)*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥)))
                            + c‚Çò‚Å∫[m]*(Œ∫[m])^3*exp.(Œ∫[m]*(x .- xg))*(-Œ∫[m]*tan(Œ∫[m]*(HH-Œ≥))))
    end
  end
  X
end
function ‚àÇ‚Çì¬≥u‚ÇÇ(x, sol::FiniteDepthSolution)
  xg = sol.ndp.geo[4]
  p = sol.p
  b = sol.b
  xg = sol.ndp.geo[4]
  @assert length(p) == length(b)
  ((-p[1])^3*b[1]*exp.(-p[1]*(x .-xg)) +
   (-p[2])^3*b[2]*exp.(-p[2]*(x .-xg)))
end

### Add a new interface to implement the iceberg vibration problem
## NOTE: This file needs to be split into modules.
function solve(ice::Ice, fluid::Fluid, œâ, ::FreeFree, fd::FiniteDepth)
  N = fd.N
  ndp = non_dimensionalize(ice, fluid, œâ)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  g = ndp.geo[end]
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  X = ndp.X
  œâ = ‚àö(Œ±*g/ùëô)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  d = Œ≥*ùëô
  A‚Çö = g/(1im*œâ)

  k = dispersion_free_surface(Œ±, N, HH)
  Œ∫ = dispersion_ice(Œ±, 1., Œ≥, N+2, HH-Œ≥)

  function innerproduct(k, kappa, H, d)
    if(abs(k-kappa)>=1e-7)
      return ( (kappa*sin(kappa*(H-d))*cos(k*(H-d)) - k*cos(kappa*(H-d))*sin(k*(H-d)))/(kappa^2-k^2) );
    else
      return ( (H-d)/2 + sin(2*k*(H-d))/(4*k) );
    end
  end

  œá = (0:N)*(œÄ/(HH-Œ≥))
  Œª = k; Œª[1] = k[1]

  D1 = zeros(ComplexF64, N+1, N+3)
  D2 = zeros(ComplexF64, N+1, N+1)
  D3 = zeros(ComplexF64, N+1, N+3)

  for m=1:N+1
    for n=1:N+3
      D1[m,n] = innerproduct(œá[m], Œ∫[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(Œ∫[n]*(HH-Œ≥)))
      if(n ‚â§ N+1)
        D2[m,n] = innerproduct(œá[m], k[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(k[n]*HH))
      end
      D3[m,n] = innerproduct(k[m], Œ∫[n], HH, Œ≥)/(cos(k[m]*HH)*cos(Œ∫[n]*(HH-Œ≥)))
    end
  end

  A = diagm(vec(0.5*(cos.(k*HH).*sin.(k*HH) + k*HH)./(k.*(cos.(k*HH)).^2)))

  B1 = hcat(-D1, -D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1))) # Match potentials at x=0
  B2 = hcat(D3.*transpose(repeat(Œ∫, 1, N+1)), D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1))) # Match vel. at x=0
  B3 = hcat(-D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1)), -D1) # Match potentials at x=L
  B4 = hcat(D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1)), D3.*transpose(repeat(Œ∫, 1, N+1))) # Match vel. at x=L


  B5 = transpose(hcat(-(Œ∫.^3).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                      (Œ∫.^4).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)), #Free at x=L (c‚Çò‚Åª)
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                      (Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)))) #Free at x=0 (c‚Çò‚Åª)
  B6 = transpose(hcat(-(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                      -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)), #Free at x=L (c‚Çò‚Å∫)
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL),
                      -(Œ∫.^4).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL))) #Free at x=L (c‚Çò‚Å∫)

  Z = zeros(ComplexF64, N+1, N+1)

  f1 = -A‚Çö*D2[:,1]
  f2 = zeros(ComplexF64, N+1, 1)
  f2[1] = k[1]*A‚Çö*A[1,1]

  LHS‚ÇÅ = hcat(D2, B1, Z)
  LHS‚ÇÇ = hcat(diagm(vec(Œª)).*A, B2, Z)
  LHS‚ÇÉ = hcat(Z, B3, D2)
  LHS‚ÇÑ = hcat(Z, B4, diagm(vec(Œª)).*A)
  LHS‚ÇÖ = hcat(zeros(ComplexF64,4,N+1), B5, B6, zeros(ComplexF64,4,N+1))

  LHS = vcat(LHS‚ÇÅ, LHS‚ÇÇ, LHS‚ÇÉ, LHS‚ÇÑ, LHS‚ÇÖ)
  RHS = vcat(f1, f2, zeros(ComplexF64, N+1, 1),
             zeros(ComplexF64, N+1, 1), zeros(ComplexF64, 4, 1))
  sol = LHS\RHS
  a‚Çò = sol[1:N+1]
  c‚Çò = sol[N+2:3N+7]
  c‚Çò‚Åª = c‚Çò[1:N+3]
  c‚Çò‚Å∫ = c‚Çò[N+4:2N+6]
  d‚Çò = sol[3N+8:4N+8]

  FiniteDepthSolution(vcat(a‚Çò,d‚Çò), c‚Çò‚Åª, c‚Çò‚Å∫, vec(k), vec(Œ∫), vec(zeros(ComplexF64,2,1)),
                      vec(zeros(ComplexF64,2,1)), ndp, LHS, vec(RHS), FreeFree())
end
