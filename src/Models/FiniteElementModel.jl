include("non_local_bc.jl")
include("plot_functions.jl")

########################################################
# Functions to obtain the mode shapes of the beam
########################################################
function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeBedrock)
  Œ± = ndp.Œ±
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  xg = ndp.geo[4]
  p = PolynomialRoots.roots([ùëò^4 - Œ≥*Œ±, 0, 0, 0, 1])
  if(real(ùëò^4 - Œ≥*Œ±) > 0)
    p‚ÇÅ = p[(real(p) .< 1e-9)][1]
    p‚ÇÇ = p[(real(p) .< 1e-9)][2]
  else
    p‚ÇÅ = p[abs.(real(p)) .< 1e-9][1]
    p‚ÇÇ = p[abs.(real(p)) .< 1e-9][2]
  end
  A = zeros(ComplexF64, 4, 4)
  A[1,:] = [0, 1, 0, -1];
  A[2,:] = [1, 0, -1, 0];
  A[3,:] = [Œ≤^2*sinh(Œ≤*xg) - Œ≤*cosh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) + p‚ÇÅ*p‚ÇÇ*sinh(Œ≤*xg),
            Œ≤^2*cosh(Œ≤*xg) - Œ≤*sinh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) + p‚ÇÅ*p‚ÇÇ*cosh(Œ≤*xg),
            p‚ÇÅ*p‚ÇÇ*sin(Œ≤*xg) - Œ≤*cos(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤^2*sin(Œ≤*xg),
            Œ≤*sin(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤^2*cos(Œ≤*xg) + p‚ÇÅ*p‚ÇÇ*cos(Œ≤*xg)]
  A[4,:] = [Œ≤^3*cosh(Œ≤*xg) - Œ≤*cosh(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*sinh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ),
            Œ≤^3*sinh(Œ≤*xg) - Œ≤*sinh(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*cosh(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ),
            p‚ÇÅ*p‚ÇÇ*sin(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ) - Œ≤*cos(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) - Œ≤^3*cos(Œ≤*xg),
            Œ≤^3*sin(Œ≤*xg) + Œ≤*sin(Œ≤*xg)*(p‚ÇÅ^2 + p‚ÇÅ*p‚ÇÇ + p‚ÇÇ^2) + p‚ÇÅ*p‚ÇÇ*cos(Œ≤*xg)*(p‚ÇÅ + p‚ÇÇ)]
  b = zeros(ComplexF64, 4, 1)
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  ev = eigvals(A)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A)[:,ind]

  # Find the bedrock displacement
  Œ∑g = c[1]*sinh(Œ≤*xg) + c[2]*cosh(Œ≤*xg) + c[3]*sin(Œ≤*xg) + c[4]*cos(Œ≤*xg)
  ‚àÇ‚ÇìŒ∑g = c[1]*Œ≤*cosh(Œ≤*xg) + c[2]*Œ≤*sinh(Œ≤*xg) + c[3]*Œ≤*cos(Œ≤*xg) - c[4]*Œ≤*sin(Œ≤*xg)
  A = [1 1; p‚ÇÅ p‚ÇÇ]
  f = [Œ∑g, ‚àÇ‚ÇìŒ∑g]
  b = A\f
  (c, [p‚ÇÅ, p‚ÇÇ], (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x)))
end
function Œæ‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeBedrock)
  xg = ndp.geo[4]
  c, p, _ = Œ∑‚Çñ(xg, Œ≤, ndp, FreeBedrock())
  Œ∑g = (c[1]*sinh(Œ≤*xg) + c[2]*cosh(Œ≤*xg) + c[3]*sin(Œ≤*xg) + c[4]*cos(Œ≤*xg))
  ‚àÇ‚ÇìŒ∑g = (c[1]*Œ≤*cosh(Œ≤*xg) + c[2]*Œ≤*sinh(Œ≤*xg) + c[3]*Œ≤*cos(Œ≤*xg) - c[4]*Œ≤*sin(Œ≤*xg))
  A = [1 1; p[1] p[2]]
  f = [Œ∑g, ‚àÇ‚ÇìŒ∑g]
  b = A\f
  (b, Nothing, b[1]*exp.(p[1]*(x .- xg)) + b[2]*exp.(p[2]*(x .- xg)))
end

function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeClamped)
  xg = ndp.geo[4]
  A = [0 1 0 -1;
       1 0 -1 0;
       sinh(Œ≤*xg) cosh(Œ≤*xg) sin(Œ≤*xg) cos(Œ≤*xg);
       cosh(Œ≤*xg) sinh(Œ≤*xg) cos(Œ≤*xg) -sin(Œ≤*xg)]
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  b = zeros(ComplexF64, 4, 1)
  ev = eigvals(A)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A)[:,ind]
  # Return displacement
  (c, Nothing, (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x)))
end
function Œ∑‚Çñ(x, Œ≤::Float64, ndp::NonDimensionalProblem, ::FreeHinged)
  xg = ndp.geo[4]
  A = [0 1 0 -1;
       1 0 -1 0;
       sinh(Œ≤*xg) cosh(Œ≤*xg) sin(Œ≤*xg) cos(Œ≤*xg);
       sinh(Œ≤*xg) cosh(Œ≤*xg) -sin(Œ≤*xg) -cos(Œ≤*xg)]
  b = zeros(ComplexF64, 4, 1)
  # Find eigenvector corresponding to Œª = 0 of [A]x = Œªx
  ev = eigvals(A)
  ind = findfirst(abs.(ev)/maximum(abs.(ev)) .‚â§ 1e-8)
  c = eigvecs(A)[:,ind]
  # Return displacement
  (c, Nothing, (c[1]*sinh.(Œ≤*x) + c[2]*cosh.(Œ≤*x) + c[3]*sin.(Œ≤*x) + c[4]*cos.(Œ≤*x)))
end

#################################################
# Begin finite element related function.
# We use Gridap.jl to implement the method
#################################################
struct FiniteElementModel
  dim::Int64
  partition::Tuple
  nev::Int64
  NModes::Int64
end
FiniteElementModel() = FiniteElementModel(2, (20,20), 5, 3)

struct FiniteDepthFEM
  mesh::Triangulation
  Œìs::Vector{BoundaryTriangulation}
  fespace::FESpace
  dim::Int64
  domain::Tuple
  partition::Tuple
  nev::Int64
end

struct FiniteElementSolution
  œï‚ÇÄ::FEFunction
  œï‚Çñ::Vector{FEFunction}
  Œª‚Çñ::Vector{ComplexF64}
  linear_system::Tuple
  ndp::NonDimensionalProblem
  BeamType
end

function FiniteDepthFEM(ice::Ice, fluid::Fluid, œâ, dim::Int64, partition::Tuple, nev, beam_type)
  @assert length(partition) == dim
  ndp = non_dimensionalize(ice, fluid, œâ)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  xg = ndp.geo[4]
  Œ≥ = ndp.Œ≥
  domain = (beam_type==FreeBedrock()) ? (0, xg, -HH, -Œ≥) : (0, LL, -HH, -Œ≥)
  model = CartesianDiscreteModel(domain, partition)
  Œ© = Triangulation(model)
  labels = get_face_labeling(model)
  add_tag_from_tags!(labels, "neumannIce", [6])
  add_tag_from_tags!(labels,"NonLocal",[7]);
  Œì‚ÇÉ = BoundaryTriangulation(model, labels, tags="neumannIce");
  Œì‚ÇÑ = BoundaryTriangulation(model, labels, tags="NonLocal");
  reffe = ReferenceFE(lagrangian,Float64,1);
  V‚Çï=FESpace(model, reffe, conformity=:H1, vector_type=ComplexF64);
  FiniteDepthFEM(Œ©, [Œì‚ÇÉ, Œì‚ÇÑ], V‚Çï, dim, domain, partition, nev)
end

include("fem_solve.jl")
include("ref_coeff.jl")

function solve(ice::Ice, fluid::Fluid, œâ, ptype, femodel::FiniteElementModel; verbosity=0)
  ndp = non_dimensionalize(ice, fluid, œâ)
  fem = FiniteDepthFEM(ice, fluid, œâ, femodel.dim, femodel.partition, femodel.nev, ptype)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  Œ≥ = ndp.Œ≥
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  g = fluid.g
  œâ = ‚àö(Œ±*g/ùëô)
  A‚Çö = (g/(1im*œâ))
  NModes = femodel.NModes

  k = dispersion_free_surface(Œ±, NModes, HH)
  kd = dispersion_free_surface(Œ±, NModes, HH-Œ≥)
  Œº = solve_eigen_eb(fem.nev, ndp, ptype)

  Œì‚ÇÉ = fem.Œìs[1]
  Œì‚ÇÑ = fem.Œìs[2]

  (verbosity > 0) && print("Obtaining non-local boundary condition ...\n")
  Qœï,œá = getMQœá(k, kd, HH, Œ≥, NModes, A‚Çö, Œì‚ÇÑ, fem.fespace, exp.(0*kd))

  (verbosity > 0) && print("Solving Diffraction Potential ...\n")
  œï‚ÇÄ, œï‚ÇÄ ∞ = _get_laplace_mat_eb(fem, ndp, ptype, Œº[1], 0, 0, Qœï, œá)

  œï‚Çñ = zeros(ComplexF64, length(œá), femodel.nev)
  œï‚Çñ ∞ = Vector{FEFunction}(undef, fem.nev)
  (verbosity > 0) && print("Solving Radiation Potential ... ")
  for m=1:fem.nev
    œï‚Çñ[:,m], œï‚Çñ ∞[m] = _get_laplace_mat_eb(fem, ndp, ptype, Œº[m], 0, œâ*ùëô, Qœï, 0*œá)
    (verbosity > 0) && print(string(m)*"...")
  end
  (verbosity > 0) && print("\n")

  (verbosity > 0) && print("Solving the reduced system ...\n")
  Œª, K, B, AB, F = _build_reduced_system(Œº, œï‚ÇÄ, œï‚Çñ, ndp, Œì‚ÇÉ,
                                         fem.fespace, ptype, 0)

  œï = œï‚ÇÄ + œï‚Çñ*Œª

  œï ∞ = FEFunction(fem.fespace, vec(œï))
  Ref = get_ref_coeff(œï ∞, NModes, k, kd, HH, Œ≥, Œì‚ÇÑ, A‚Çö, exp.(0*kd))

  FiniteElementSolution(œï‚ÇÄ ∞, œï‚Çñ ∞, vec(Œª), (K, B, AB, F, Ref), ndp, ptype)
end

function u‚ÇÅ(x, fes::FiniteElementSolution)
  Œª = fes.Œª‚Çñ
  ndp = fes.ndp
  nev = length(Œª)
  Œ≤s = solve_eigen_eb(nev, ndp, fes.BeamType)
  U = zeros(ComplexF64, length(x), 1)
  for m=1:nev
    U = U .+ Œª[m]*Œ∑‚Çñ(x, Œ≤s[m], ndp, fes.BeamType)[3]
  end
  U
end

function u‚ÇÇ(x, fes::FiniteElementSolution)
  @assert fes.BeamType == FreeBedrock()
  Œª = fes.Œª‚Çñ
  ndp = fes.ndp
  nev = length(Œª)
  Œ≤s = solve_eigen_eb(nev, ndp, fes.BeamType)
  U = zeros(ComplexF64, length(x), 1)
  for m=1:nev
    U = U .+ Œª[m]*Œæ‚Çñ(x, Œ≤s[m], ndp, fes.BeamType)[3]
  end
  U
end
