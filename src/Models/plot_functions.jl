function _plot_compare_dispersion_equation(sol‚ÇÅ::Union{ShallowWaterSolution, FiniteDepthSolution})
  ndp = sol‚ÇÅ.ndp
  xg = sol‚ÇÅ.ndp.geo[4]
  beta‚Çõ = 0.001:0.001:10*œÄ/xg
  fbeta‚Çõ = zeros(ComplexF64,length(beta‚Çõ),1)
  ùëò = sol‚ÇÅ.ndp.ùëò
  for m=1:length(beta‚Çõ)
    fbeta‚Çõ[m] = _dispersion_composite_beam(beta‚Çõ[m], ndp)
  end
  plt = plot(beta‚Çõ, real.(fbeta‚Çõ), label="Composite beam", color=:green)
  # Plot the dispersion equation of the clamped beam
  plot!(plt, beta‚Çõ, (cos.(beta‚Çõ*xg) + 1 ./cosh.(beta‚Çõ*xg)), label="Clamped beam",
        line=(:dot, 1), color=:red)
  plot!(plt, beta‚Çõ, (cos.(beta‚Çõ*xg).*tanh.(beta‚Çõ*xg) - sin.(beta‚Çõ*xg)),
        label="Hinged beam", line=(:dot, 1), color=:blue)
  plot!(plt, beta‚Çõ, 0*beta‚Çõ, label="0", line=(:dot, 2), color=:magenta)
  title!(plt, "\$k_0 = "*string(round(ùëò,digits=4))*"\$")
  display(plt)
end

function _plot_invacuo_ice_eb(ndp::NonDimensionalProblem, modeNo::Int64)
  ùëò = ndp.ùëò
  Œ≥ = ndp.Œ≥
  Œ± = ndp.Œ±
  xg = ndp.geo[4]
  LL = ndp.geo[1]
  # Bedrock problem
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeBedrock())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  x‚ÇÅ = 0:0.01:ndp.geo[4]
  _, _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeBedrock())
  x‚ÇÇ = xg:0.01:LL

  _, y‚ÇÇ = Œæ‚Çñ(x‚ÇÇ, Œ≤, ndp, FreeBedrock())
  plt = plot(x‚ÇÅ, real(y‚ÇÅ), label="\$ x < x_g\$", color=:green, line=(:solid, 2))
  plot!(plt, x‚ÇÇ, real(y‚ÇÇ), label="\$ x > x_g\$", color=:brown, line=(:solid, 2))

  # Free Clamped beam
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeClamped())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeClamped())
  plot!(plt, x‚ÇÅ, real(y‚ÇÅ), label="Clamped", color=:blue, line=(:dash, 1))
  plot!(plt, x‚ÇÇ, 0*real(x‚ÇÇ), label="Rigid Bed", color=:black, line=(:solid, 1))

  # Free Hinged beam
  Œ≤‚Çõ = solve_eigen_eb(10, ndp, FreeHinged())
  Œ≤ = real(Œ≤‚Çõ[modeNo])
  _, y‚ÇÅ = Œ∑‚Çñ(x‚ÇÅ, Œ≤, ndp, FreeHinged())
  plot!(plt, x‚ÇÅ, real(y‚ÇÅ), label="Hinged", color=:red, line=(:dash, 1))


  title!(plt, "Mode \$"*string(modeNo)*"\$")
  plt
end
