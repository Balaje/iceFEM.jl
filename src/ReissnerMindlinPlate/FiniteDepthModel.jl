function solve(ice::Ice, fluid::Fluid, œâ, ::FreeFree, fd::FiniteDepth, ::ReissnerMindlinIce; Œº=1)
  N = fd.N
  ndp = non_dimensionalize(ice, fluid, œâ, ReissnerMindlinIce(); Œº=Œº)
  Œ± = ndp.Œ±
  ùëô = ndp.ùëô
  g = ndp.geo[5]
  Œ≥ = ndp.Œ≥
  ùëò = ndp.ùëò
  X = ndp.X
  œâ = ‚àö(Œ±*g/ùëô)
  LL = ndp.geo[1]
  HH = ndp.geo[2]
  d = Œ≥*ùëô
  A‚Çö = g/(1im*œâ)
  # New parameters for the RM-plate
  Œ¥ = ndp.geo[end]
  Œ∂ = Œ≥^2

  k = dispersion_free_surface(Œ±, N, HH)
  Œ∫ = dispersion_ice(Œ±, 1., Œ≥, Œ¥, Œ∂, N+2, HH-Œ≥)

  function innerproduct(k, kappa, H, d)
    if(abs(k-kappa)>=1e-7)
      return ( (kappa*sin(kappa*(H-d))*cos(k*(H-d)) - k*cos(kappa*(H-d))*sin(k*(H-d)))/(kappa^2-k^2) );
    else
      return ( (H-d)/2 + sin(2*k*(H-d))/(4*k) );
    end
  end

  œá = (0:N)*(œÄ/(HH-Œ≥))
  Œª = k; Œª[1] = k[1]

  D1 = zeros(ComplexF64, N+1, N+3)
  D2 = zeros(ComplexF64, N+1, N+1)
  D3 = zeros(ComplexF64, N+1, N+3)

  for m=1:N+1
    for n=1:N+3
      D1[m,n] = innerproduct(œá[m], Œ∫[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(Œ∫[n]*(HH-Œ≥)))
      if(n ‚â§ N+1)
        D2[m,n] = innerproduct(œá[m], k[n], HH, Œ≥)/(cos(œá[m]*(HH-Œ≥))*cos(k[n]*HH))
      end
      D3[m,n] = innerproduct(k[m], Œ∫[n], HH, Œ≥)/(cos(k[m]*HH)*cos(Œ∫[n]*(HH-Œ≥)))
    end
  end

  A = diagm(vec(0.5*(cos.(k*HH).*sin.(k*HH) + k*HH)./(k.*(cos.(k*HH)).^2)))

  B1 = hcat(-D1, -D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1))) # Match potentials at x=0
  B2 = hcat(D3.*transpose(repeat(Œ∫, 1, N+1)), D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1))) # Match vel. at x=0
  B3 = hcat(-D1.*transpose(repeat(exp.(-Œ∫*LL), 1, N+1)), -D1) # Match potentials at x=L
  B4 = hcat(D3.*transpose(repeat(-Œ∫.*exp.(-Œ∫*LL), 1, N+1)), D3.*transpose(repeat(Œ∫, 1, N+1))) # Match vel. at x=L


  Œ≥Œ±Œ¥ = (Œ≥*Œ±*Œ¥/Œ∂ + Œ≥*Œ±*Œ∂/12)
  B5 = transpose(hcat(-(Œ∫.^3).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)),
                      (Œ∫.^4 .+ Œ≥Œ±Œ¥*Œ∫.^2).*exp.(-Œ∫*LL).*tan.(Œ∫*(HH-Œ≥)), #Free at x=L (c‚Çò‚Åª)
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                      (Œ∫.^4 .+ Œ≥Œ±Œ¥*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥))) #Free at x=0 (c‚Çò‚Åª)
                 )
  B6 = transpose(hcat(-(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)),
                      -(Œ∫.^4 .+ Œ≥Œ±Œ¥*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)), #Free at x=L (c‚Çò‚Å∫)
                      -(Œ∫.^3).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL),
                      -(Œ∫.^4 .+ Œ≥Œ±Œ¥*Œ∫.^2).*tan.(Œ∫*(HH-Œ≥)).*exp.(-Œ∫*LL)) #Free at x=0 (c‚Çò‚Å∫)
                 )

  Z = zeros(ComplexF64, N+1, N+1)

  f1 = -A‚Çö*D2[:,1]
  f2 = zeros(ComplexF64, N+1, 1)
  f2[1] = k[1]*A‚Çö*A[1,1]

  LHS‚ÇÅ = hcat(D2, B1, Z)
  LHS‚ÇÇ = hcat(diagm(vec(Œª)).*A, B2, Z)
  LHS‚ÇÉ = hcat(Z, B3, D2)
  LHS‚ÇÑ = hcat(Z, B4, diagm(vec(Œª)).*A)
  LHS‚ÇÖ = hcat(zeros(ComplexF64,4,N+1), B5, B6, zeros(ComplexF64,4,N+1))

  LHS = vcat(LHS‚ÇÅ, LHS‚ÇÇ, LHS‚ÇÉ, LHS‚ÇÑ, LHS‚ÇÖ)
  RHS = vcat(f1, f2, zeros(ComplexF64, N+1, 1),
             zeros(ComplexF64, N+1, 1), zeros(ComplexF64, 4, 1))
  sol = LHS\RHS
  a‚Çò = sol[1:N+1]
  c‚Çò = sol[N+2:3N+7]
  c‚Çò‚Åª = c‚Çò[1:N+3]
  c‚Çò‚Å∫ = c‚Çò[N+4:2N+6]
  d‚Çò = sol[3N+8:4N+8]

  FiniteDepthSolution(vcat(a‚Çò,d‚Çò), c‚Çò‚Åª, c‚Çò‚Å∫, vec(k), vec(Œ∫), vec(zeros(eltype(k),2,1)),
                      vec(zeros(eltype(k),2,1)), ndp, LHS, vec(RHS), FreeFree())
end
